(function() {'use strict'; if (typeof window.import === 'undefined') {window.import = function() {return Promise.reject(new Error('import() is not supported in this context'));};}if (typeof window.importMeta === 'undefined') {window.importMeta = {url: window.location.href, resolve: function(specifier) {return new URL(specifier, window.location.href).href;}, env: {MODE: window.location.hostname === 'localhost' ? 'development' : 'production', DEV: window.location.hostname === 'localhost', PROD: window.location.hostname !== 'localhost' }};}if (typeof globalThis !== 'undefined' && typeof globalThis.import === 'undefined') {Object.defineProperty(globalThis, 'import', {value: {meta: window.importMeta }, writable: false, configurable: false });}const originalPostMessage = window.postMessage; window.postMessage = function(message, targetOrigin, transfer) {try {if (message && typeof message === 'object') {message = JSON.parse(JSON.stringify(message, function(key, value) {if (value instanceof URL) {return value.href;}return value;}));}return originalPostMessage.call(this, message, targetOrigin, transfer);}catch (error) {console.warn('ProElements: Fixed DataCloneError in postMessage:', error); try {return originalPostMessage.call(this, {error: 'DataCloneError'}, targetOrigin, transfer);}catch (fallbackError) {console.error('ProElements: Failed to send message:', fallbackError);}}}; if (typeof Worker !== 'undefined') {const OriginalWorker = Worker; window.Worker = function(scriptURL, options) {const worker = new OriginalWorker(scriptURL, options); const originalPostMessage = worker.postMessage; worker.postMessage = function(message, transfer) {try {if (message && typeof message === 'object') {message = JSON.parse(JSON.stringify(message, function(key, value) {if (value instanceof URL) {return value.href;}if (value instanceof File || value instanceof Blob) {return '[Object ' + value.constructor.name + ']';}return value;}));}return originalPostMessage.call(this, message, transfer);}catch (error) {console.warn('ProElements: Fixed DataCloneError in Worker postMessage:', error);}}; return worker;};}function checkElementorElements() {if (typeof elementorFrontend === 'undefined' || !elementorFrontend.elements || !elementorFrontend.elements.$body) {setTimeout(checkElementorElements, 100); return;}const originalFind = elementorFrontend.elements.$body.find; elementorFrontend.elements.$body.find = function(selector) {try {const result = originalFind.call(this, selector); if (result.length === 0 && selector.includes('.elementor-')) {console.warn('ProElements: Element not found, attempting to create:', selector); const matches = selector.match(/\.elementor-(\d+)/); if (matches && matches[1]) {const documentId = matches[1]; let container = document.querySelector(selector); if (!container) {container = document.createElement('div'); container.className = `elementor elementor-${documentId}`; container.dataset.elementorType = 'wp-page'; container.dataset.elementorId = documentId; document.body.appendChild(container); console.log(`ProElements: Created missing container for document ${documentId}`);}return $(container);}}return result;}catch (error) {console.error('ProElements: Error in element find:', error); return $([]);}};}if (typeof jQuery !== 'undefined' && jQuery.migrateWarnings) {jQuery.migrateTrace = false; jQuery.migrateReset = function() {jQuery.migrateWarnings.length = 0;};}const originalCreateElement = document.createElement; document.createElement = function(tagName) {const element = originalCreateElement.call(this, tagName); if (tagName.toLowerCase() === 'script') {const originalSetAttribute = element.setAttribute; element.setAttribute = function(name, value) {if (name === 'src' && value && typeof value === 'string') {element.onerror = function() {console.warn('ProElements: Failed to load script:', value);};}return originalSetAttribute.call(this, name, value);};}return element;}; function preventLayoutForcing() {const style = document.createElement('style'); style.textContent = ` .elementor-element:not(.elementor-loaded) {visibility: hidden;}.elementor-element.elementor-loaded {visibility: visible;}`; document.head.appendChild(style);}function initializeFixes() {checkElementorElements(); preventLayoutForcing(); console.log('ProElements: Compatibility fixes applied');}if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded', initializeFixes);}else {initializeFixes();}function addElementorHooks() {if (typeof elementorFrontend !== 'undefined' && elementorFrontend.hooks && typeof elementorFrontend.hooks.addAction === 'function') {elementorFrontend.hooks.addAction('frontend/element_ready/global', initializeFixes);}else {setTimeout(addElementorHooks, 100);}}addElementorHooks(); if (typeof __webpack_require__ !== 'undefined' && typeof __webpack_require__.r === 'undefined') {__webpack_require__.r = function(exports) {if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {Object.defineProperty(exports, Symbol.toStringTag, {value: 'Module' });}Object.defineProperty(exports, '__esModule', {value: true });};}})();